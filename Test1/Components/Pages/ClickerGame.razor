@page "/Test1"
@using Test1.Data
@using Test1.Services
@rendermode InteractiveServer

<PageTitle>Test1</PageTitle>

<h1 class="text-center">Clicker Game</h1>
<h2 class="text-center h2">Current player: @_currentPlayer</h2>

<div class="mb-2 d-flex flex-column justify-content-center align-items-center">
    <input type="text" 
           class="form-control rounded-pill shadow-sm w-25" 
           value="@_inputUsername"
           @onchange="ValidateUsername"
           @oninput="ValidateUsername"
           maxlength="20"
           placeholder="Enter Username (3-20 characters)" />
    <button class="btn btn-warning text-uppercase fw-bold mt-2 rounded-pill px-4 w-25" @onclick="SwitchAccount">Load Account</button>
    <p class="text-danger">@_errorMessage</p>
</div>

<div class="shadow-lg bg-dark-subtle bg-gradient border border-dark rounded-3 card h-100 p-4">
    <p role="status" class="text-center h1">
        Clicks: @Clicker?.CurrentCount
    </p>
    <div class="container d-flex flex-row justify-content-between">
        <div class="d-flex flex-column align-items-center">
            <ClickButtonPanel OnUpdated="HandleGameUpdated"/>
        </div>
        <div class="d-flex flex-column align-items-center">
            <AutoClickerPanel OnUpdated="HandleGameUpdated"/>
        </div>
        <div class="d-flex flex-column align-items-center">
            <SuperClickerPanel OnUpdated="HandleGameUpdated"/>
        </div>
    </div>
</div>

<div class="mb-2 d-flex flex-column justify-content-center align-items-center">
    <button class="save-button btn btn-success mt-3 rounded-pill w-25 text-uppercase" @onclick="SaveGame">Save Progress</button>
</div>

@code {
    [Inject] private ClickerService? Clicker { get; set; }
    [Inject] private GameManager? GameManager { get; set; }
    private string _inputUsername = "";
    private string _currentPlayer = "";
    string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        if (Clicker == null || GameManager == null)
            throw new InvalidOperationException("ClickerService or GameManager not injected!");

        Clicker.OnClickUpdated += HandleGameUpdated;
        GameManager.OnGameUpdated += HandleGameUpdated;
        GameManager.StartAutoClickers();
        GameManager.StartSuperClickers();
    }
    
    private void SaveGame()
    {
        Clicker?.SaveProgress();
    }

    private void HandleGameUpdated()
    {
        InvokeAsync(StateHasChanged);
    }

    private void ValidateUsername(ChangeEventArgs e)
    {
        string? value = e.Value?.ToString();
        if (value != null)
        {
            _inputUsername = value;
        }
        
        if (string.IsNullOrWhiteSpace(_inputUsername))
        {
            _errorMessage = "You must enter a username.";
        }
        else if (_inputUsername.Length < 3)
        {
            _errorMessage = "Username must be at least 3 characters long.";
        }
        else if (_inputUsername.Length > 20)
        {
            _errorMessage = "Username cannot be longer than 20 characters.";
        }
        else
        {
            _errorMessage = "";
        }
        
        HandleGameUpdated();
    }

    private void SwitchAccount()
    {
        if (string.IsNullOrWhiteSpace(_inputUsername) || _inputUsername.Length < 3 || _inputUsername.Length > 20)
        {
            return;
        }
        
        _currentPlayer = _inputUsername;
        Clicker?.LoadPlayer(_inputUsername);
    }

    public void Dispose()
    {
        if (GameManager != null)
        {
            GameManager.OnGameUpdated -= HandleGameUpdated;
        }

        if (Clicker != null)
        {
            Clicker.OnClickUpdated -= HandleGameUpdated;
        }
    }
}